@page "/thesite"
@implements IDisposable

<h3>The Site</h3>

<div>
    Hillyfields Bubble:
    <p>
Explanation of what's a bubble and what is the Hillyfields Bubble.'
    </p>
</div>

<div class="row justify-content-center">
    <div class="col-6" style="height:640px;width:640px">
        <Viewer @ref="View3D1" Scene=scene Camera="camera"/>
    </div>
    <div>@msg</div>
</div>

@code {
    private Viewer View3D1 = null!;
    private Scene scene = new Scene();
    private Guid loadedObjectGuid = Guid.NewGuid();
    private string msg = string.Empty;

    private Camera camera = new PerspectiveCamera()
        {
            Fov = 125,
            Position = new Vector3(20, 20, 1),
            AnimateRotationSettings = new AnimateRotationSettings(true, 0.1, 0.05, 0.1, radius: 256)
            {
                StopAnimationOnOrbitControlMove = true
            },
            LookAt = new Vector3(0.5f, -50, 0)
        };

    public void Dispose()
    {
        View3D1.ObjectLoaded -= OnObjectLoaded;
        View3D1.JsModuleLoaded -= OnJsModuleLoaded;
    }

    protected override Task OnInitializedAsync()
    {
        scene.BackGroundColor = "white";
        AddLights();
        return base.OnInitializedAsync();
    }

    private void AddLights()
    {
        scene.Add(new AmbientLight());
        scene.Add(new PointLight()
            {
                Intensity = 3f,
                Position = new Vector3(200, -200, 200)
            });
        scene.Add(new PointLight()
            {
                Intensity = 0.2f,
                Position = new Vector3(0, -200, 500),
                Decay = 0,

            });
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            double radius = 256.0 * 1.08;
            double offset = radius * Math.Sqrt(3.0) / 8.0;
            // subscribe events only once
            View3D1.ObjectLoaded += OnObjectLoaded;
            View3D1.JsModuleLoaded += OnJsModuleLoaded;
            scene.Add(new Mesh
                {
                    Geometry = new SphereGeometry(radius: (float)radius, widthSegments: 128, heightSegments: 64),
                    Position = new Vector3(0, offset, 0),
                    Material = new MeshStandardMaterial()
                    {
                        Color = "blue",
                        Transparent = true,
                        Wireframe = true,
                        Opacity = 0.025
                    },
                });
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnJsModuleLoaded()
    {
        OnLoadGltfButtonClick();
#if NOT
    var settings = new ImportSettings
    {
    Format = Import3DFormats.Gltf,
    FileURL = "/assets/blazor3d.glb",
    };
    loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
    await View3D1.SetCameraPositionAsync(new Vector3(0, 0, 1), new Vector3(0, 0, 0));
#endif
    }

    private async Task OnLoadObjButtonClick()
    {
        // if you need to control the loaded object uuid, generate it here.
        loadedObjectGuid = Guid.NewGuid();
        var settings = new ImportSettings
            {
                Format = Import3DFormats.Obj,//choose appropriate format
                FileURL = "https://threejs.org/examples/models/obj/male02/male02.obj",// link to your model file
                TextureURL = "https://threejs.org/examples/textures/uv_grid_opengl.jpg", // link to the texture or skip this,
                Uuid = loadedObjectGuid //// skip this, or set null if you don't care the uuid of loaded mesh or group
            };
        await View3D1.Import3DModelAsync(settings);

        // set camera position to view your loaded model
        await View3D1.SetCameraPositionAsync(
            new Vector3(0, 100, 100),// camera position
            new Vector3(0, 50, 0));// optional camera target
    }

    private async Task OnLoadObjNoTexturesButtonClick()
    {
        var settings = new ImportSettings
            {
                Format = Import3DFormats.Obj,
                FileURL = "https://threejs.org/examples/models/obj/male02/male02.obj",
            };
        // Also you can get the uuid of object to be imported before its loaded completely
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        await View3D1.SetCameraPositionAsync(new Vector3(0, 100, 250), new Vector3(-50, 50, 0));
    }

    private async Task OnLoadColladaButtonClick()
    {
        var settings = new ImportSettings
            {
                Format = Import3DFormats.Collada,
                FileURL = "https://threejs.org/examples/models/collada/elf/elf.dae",
            };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        await View3D1.SetCameraPositionAsync(new Vector3(0, 5, 10), new Vector3(0, 3, 0));
    }

    private async Task OnLoadFbxButtonClick()
    {
        var settings = new ImportSettings
            {
                Format = Import3DFormats.Fbx,
                FileURL = "https://threejs.org/examples/models/fbx/Samba%20Dancing.fbx",
            };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);

        await View3D1.SetCameraPositionAsync(new Vector3(0, 100, 250), new Vector3(0, 50, 0));
    }

    private async Task OnLoadGltfButtonClick()
    {
        string uuid = Guid.NewGuid().ToString();
        var settings = new ImportSettings
            {
                Format = Import3DFormats.Gltf,
                FileURL = "https://hillyfieldsbubble.org/Data/models/2024.02.03.17.45.16.gltf?" + uuid,
                ///FileURL = "https://hillyfieldsbubble.org/Data/models/CesiumMilkTruck.gltf",
                ///FileURL = "https://hillyfieldsbubble.org/Data/models/DamagedHelmet.gltf",
                ///FileURL = "https://threejs.org/examples/models/gltf/DamagedHelmet/glTF/DamagedHelmet.gltf",
            };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        await View3D1.SetCameraPositionAsync(new Vector3(50, 50, 50), new Vector3(0, -50.5f, 0));
        ///await View3D1.SetCameraPositionAsync(new Vector3(100,20,100), new Vector3(0, 20.0f, 0));
    }
    private async Task OnLoadStlButtonClick()
    {
        var settings = new ImportSettings
            {
                Format = Import3DFormats.Stl,
                FileURL = "https://threejs.org/examples/models/stl/ascii/slotted_disk.stl",
            };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        //await View3D1.SetCameraPositionAsync(new Vector3(0, 3, 3), new Vector3(0, 1, 0));
        await View3D1.SetCameraPositionAsync(new Vector3(400, 10, 400), new Vector3(0, 20, 0));
        View3D1.UpdateScene();
        //await View3D1.SetCameraPositionAsync(new Vector3(600, 100, 600), new Vector3(0, 100, 0));

    }

    private Task OnObjectLoaded(Object3DArgs e)
    {
        // After object is loaded to component scene, you can locate it's C# clone in the scene.Children
        // At the moment, only  Object3D.Uuid and Object3D.Type properties are syncronized.
        foreach (var item in scene.Children)
        {
            if (item.Uuid == e.UUID)
            {
                this.msg = $"loaded object with id = {e.UUID} and type {item.Type}. Initial guid was {loadedObjectGuid}";
                StateHasChanged();
                break;
            }
        }
        return Task.CompletedTask;
    }

    // this one clears scene completely. it removes all items: lights, helpers, meshes, etc.
    private async Task OnClearAllClick()
    {
        await View3D1.ClearSceneAsync();
        AddLights();
        await View3D1.UpdateScene();
    }

    // this one removes last item in scene.Children collection.
    // notice, that first two items are lights
    private async Task OnDeleteLast()
    {
        if (scene.Children.Count > 0)
        {
            var last = scene.Children.Last();
            // removes item by its unique identifier
            await View3D1.RemoveByUuidAsync(last.Uuid);
        }
    }
}